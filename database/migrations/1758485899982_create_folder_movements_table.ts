import { BaseSchema } from '@adonisjs/lucid/schema'

export default class extends BaseSchema {
  protected tableName = 'folder_movements'

  async up() {
    this.schema.createTable(this.tableName, (table) => {
      table.increments('id')

      // Relationships
      table.integer('folder_id').unsigned().notNullable()

      // Movement information
      table.string('movement_type', 100).notNullable() // 'distribution', 'intimation', 'hearing', 'decision', 'appeal', 'sentence', 'archive', 'custom'
      table.string('title', 255).notNullable()
      table.text('description').notNullable()
      table.text('full_text').nullable() // Complete movement text from court

      // Legal system data
      table.string('court_protocol', 100).nullable() // Protocol from court system
      table.string('responsible_party', 255).nullable() // Who made the movement
      table.datetime('movement_date').notNullable() // Date of the movement
      table.datetime('registered_date').nullable() // Date registered in court system
      table.string('source', 50).defaultTo('manual') // 'manual', 'automated', 'court_api', 'loy_system'

      // Status and workflow impact
      table.boolean('requires_action').defaultTo(false) // If movement requires lawyer action
      table.boolean('is_deadline').defaultTo(false) // If movement sets a deadline
      table.date('deadline_date').nullable() // Deadline date if applicable
      table.string('urgency_level', 20).defaultTo('normal') // 'low', 'normal', 'high', 'urgent'
      table.boolean('notified').defaultTo(false) // If responsible parties were notified

      // Categorization
      table.json('tags').nullable() // Array of tags for categorization
      table.string('category', 100).nullable() // Movement category
      table.boolean('is_favorable').nullable() // true: favorable, false: unfavorable, null: neutral
      table.boolean('changes_status').defaultTo(false) // If this movement changes folder status

      // Integration and automation
      table.json('external_data').nullable() // Data from external systems (courts, LOY)
      table.string('external_id', 100).nullable() // ID in external system
      table.boolean('auto_generated').defaultTo(false) // Auto-generated by system
      table.json('automation_metadata').nullable() // Metadata for automation rules

      // File attachments
      table.json('attached_documents').nullable() // Array of document IDs or references

      // Audit trail
      table.integer('created_by_id').unsigned().nullable() // null for automated
      table.integer('updated_by_id').unsigned().nullable()
      table.boolean('is_public').defaultTo(true) // If movement is visible to client
      table.text('internal_notes').nullable() // Internal notes not visible to client

      table.timestamp('created_at')
      table.timestamp('updated_at')

      // Foreign key constraints
      table.foreign('folder_id').references('folders.id').onDelete('CASCADE')
      table.foreign('created_by_id').references('users.id').onDelete('SET NULL')
      table.foreign('updated_by_id').references('users.id').onDelete('SET NULL')

      // Indexes for performance
      table.index(['folder_id', 'movement_date'])
      table.index(['folder_id', 'movement_type'])
      table.index(['movement_date', 'requires_action'])
      table.index(['deadline_date', 'requires_action'])
      table.index(['urgency_level', 'requires_action'])
      table.index(['movement_type', 'is_favorable'])
      table.index(['source', 'auto_generated'])
      table.index(['external_id', 'source'])
      table.index(['registered_date'])
      table.index(['is_deadline', 'deadline_date'])
      table.index(['notified', 'requires_action'])

      // Composite indexes for common queries
      table.index(['folder_id', 'movement_type', 'movement_date'])
      table.index(['requires_action', 'deadline_date', 'urgency_level'])
      table.index(['movement_date', 'is_public', 'folder_id'])
    })
  }

  async down() {
    this.schema.dropTable(this.tableName)
  }
}
