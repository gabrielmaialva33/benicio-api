openapi: 3.1.0
info:
  title: Benicio Advogados API
  version: 1.0.0
  description: |
    ## Welcome to Benicio Advogados API

    A comprehensive legal management system API built with AdonisJS v6 for Benicio Advogados Associados.
    This API provides complete functionality for managing legal cases, clients, documents, and users.

    ### Key Features
    - **Authentication**: JWT-based authentication with access and refresh tokens
    - **Legal Case Management**: Complete CRUD operations for legal cases (folders)
    - **Client Management**: Manage corporate and individual clients with addresses and contacts
    - **Document Management**: Handle legal documents and case files
    - **Role-Based Access Control**: Comprehensive RBAC system with permissions
    - **Audit Logging**: Track all system changes and user actions

    ### Authentication
    Most endpoints require JWT authentication. Use the `/api/v1/sessions/sign-in` endpoint to obtain tokens.
    Include the access token in the Authorization header: `Bearer <token>`

    ### Rate Limiting
    Authentication endpoints are rate-limited to 5 requests per minute.

  contact:
    name: Benicio Advogados
    email: contato@benicio.com.br
    url: https://benicio.com.br
  license:
    name: Proprietary
    identifier: Proprietary

servers:
  - url: http://localhost:3333
    description: Development server
  - url: https://api.benicio.com.br
    description: Production server

tags:
  - name: Authentication
    description: User authentication and session management
  - name: AI
    description: AI-powered legal assistance with specialized agents
  - name: Folders
    description: Legal case (folder) management
  - name: Clients
    description: Client management with addresses and contacts
  - name: Users
    description: User profile and management
  - name: Roles
    description: Role and permission management
  - name: Health
    description: System health check

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from sign-in endpoint

  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
        status:
          type: integer
          description: HTTP status code
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
              field:
                type: string
              rule:
                type: string

    AiAgent:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Pesquisador Jurídico'
        slug:
          type: string
          example: 'legal-research'
        description:
          type: string
          example: 'Especialista em pesquisa de jurisprudência e legislação brasileira'
        model:
          type: string
          example: 'meta/llama-3.1-70b-instruct'
        capabilities:
          type: array
          items:
            type: string
          example: ['web_search', 'vector_search', 'citation_tracking']
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    AiConversation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        agent_id:
          type: integer
          example: 1
        folder_id:
          type: integer
          x-nullable: true
          example: 123
        title:
          type: string
          example: 'Qual o prazo para recurso de apelação?'
        mode:
          type: string
          enum: [single_agent, multi_agent]
          example: 'single_agent'
        total_tokens:
          type: integer
          example: 1500
        is_active:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        agent:
          $ref: '#/components/schemas/AiAgent'

    AiMessage:
      type: object
      properties:
        id:
          type: integer
          example: 1
        conversation_id:
          type: integer
          example: 1
        role:
          type: string
          enum: [user, assistant, system, tool]
          example: 'assistant'
        content:
          type: string
          example: 'O prazo para recurso de apelação cível é de 15 dias úteis (CPC Art. 1.003, §5º).'
        agent_id:
          type: integer
          example: 1
        model_used:
          type: string
          example: 'meta/llama-3.1-70b-instruct'
        tokens:
          type: integer
          example: 150
        finish_reason:
          type: string
          example: 'stop'
        created_at:
          type: string
          format: date-time
        citations:
          type: array
          items:
            $ref: '#/components/schemas/AiCitation'

    AiCitation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        source_type:
          type: string
          example: 'legislation'
        source_title:
          type: string
          example: 'CPC - Código de Processo Civil'
        source_url:
          type: string
          example: 'http://www.planalto.gov.br/ccivil_03/_ato2015-2018/2015/lei/l13105.htm'
        excerpt:
          type: string
          example: 'Art. 1.003. O prazo para interposição de recurso conta-se...'
        confidence_score:
          type: number
          format: float
          example: 0.95

    AiChatRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          minLength: 1
          maxLength: 10000
          example: 'Qual o prazo para recurso de apelação cível?'
        conversation_id:
          type: integer
          x-nullable: true
          example: 1
          description: 'ID de conversa existente para continuar diálogo'
        folder_id:
          type: integer
          x-nullable: true
          example: 123
          description: 'ID da pasta (processo) para contexto'
        mode:
          type: string
          enum: [single, multi]
          default: single
          example: 'single'
          description: 'single = um agent | multi = múltiplos agents colaborando'

    AiChatResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            conversation_id:
              type: integer
              example: 1
            message_id:
              type: integer
              example: 5
            agent:
              type: string
              example: 'legal-research'
            output:
              type: string
              example: 'O prazo para recurso de apelação cível é de 15 dias úteis...'
            tokens_used:
              type: integer
              example: 150
            citations:
              type: array
              items:
                $ref: '#/components/schemas/AiCitation'
            tool_calls:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  arguments:
                    type: object

    AiWorkflowRequest:
      type: object
      required:
        - workflow
      properties:
        workflow:
          type: string
          enum: [full-case-analysis, contract-review, litigation-strategy]
          example: 'full-case-analysis'
        message:
          type: string
          maxLength: 10000
          example: 'Analisar viabilidade de recurso'
        folder_id:
          type: integer
          x-nullable: true
          example: 123

    AiWorkflowResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            workflow:
              type: string
              example: 'full-case-analysis'
            results:
              type: array
              items:
                type: object
                properties:
                  agent:
                    type: string
                  output:
                    type: string
                  tokens_used:
                    type: integer
            summary:
              type: string
              example: '# Resumo do Workflow...'

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        full_name:
          type: string
          example: 'Employee Benício'
        email:
          type: string
          format: email
          example: 'employee@benicio.com.br'
        username:
          type: string
          example: 'employee'
        user_type:
          type: string
          enum: [manager, employee]
          example: 'employee'
        metadata:
          type: object
          properties:
            email_verified:
              type: boolean
            email_verified_at:
              type: string
              format: date-time
            email_verification_token:
              type: string
            email_verification_sent_at:
              type: string
              format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: 'Admin'
        slug:
          type: string
          example: 'admin'
        description:
          type: string
          x-nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    AuthTokens:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token (expires in 15 minutes)
        refresh_token:
          type: string
          description: JWT refresh token (expires in 3 days)

    AuthResponse:
      type: object
      properties:
        id:
          type: integer
        full_name:
          type: string
        email:
          type: string
        username:
          type: string
        metadata:
          type: object
        user_type:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
        auth:
          $ref: '#/components/schemas/AuthTokens'

    Client:
      type: object
      properties:
        id:
          type: integer
        person_type:
          type: string
          enum: [individual, company]
        fantasy_name:
          type: string
        company_name:
          type: string
          x-nullable: true
        document:
          type: string
          description: CPF or CNPJ
        document_type:
          type: string
          enum: [cpf, cnpj]
        state_registration:
          type: string
          x-nullable: true
        municipal_registration:
          type: string
          x-nullable: true
        email:
          type: string
          format: email
        phone:
          type: string
        mobile:
          type: string
        website:
          type: string
          x-nullable: true
        notes:
          type: string
          x-nullable: true
        client_type:
          type: string
          enum: [prospect, client, prospect_sic, prospect_dbm]
        is_active:
          type: boolean
        is_favorite:
          type: boolean
        metadata:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Folder:
      type: object
      properties:
        id:
          type: integer
        cnj_number:
          type: string
          pattern: '^[0-9]{7}-[0-9]{2}\.[0-9]{4}\.[0-9]\.[0-9]{2}\.[0-9]{4}$'
          example: '0000085-78.2023.8.06.0001'
          description: CNJ (Conselho Nacional de Justiça) case number
        internal_client_code:
          type: string
          x-nullable: true
        title:
          type: string
          example: 'Ação Ordinária - Restituição PIS/COFINS'
        description:
          type: string
          x-nullable: true
        client_id:
          type: integer
        folder_type_id:
          type: integer
        court_id:
          type: integer
          x-nullable: true
        responsible_lawyer_id:
          type: integer
          x-nullable: true
        parent_folder_id:
          type: integer
          x-nullable: true
        path:
          type: string
          x-nullable: true
        level:
          type: integer
        status:
          type: string
          enum: [pending, active, in_progress, completed, archived, suspended]
        instance:
          type: string
          enum: [first, second, superior]
        nature:
          type: string
          enum: [judicial, administrative, extrajudicial]
        action_type:
          type: string
        electronic:
          type: boolean
        phase:
          type: string
          enum: [knowledge, compliance, appeal]
        prognosis:
          type: string
          x-nullable: true
        comarca:
          type: string
          x-nullable: true
        distribution_type:
          type: string
        case_value:
          type: string
          format: decimal
          x-nullable: true
        conviction_value:
          type: string
          format: decimal
          x-nullable: true
        costs:
          type: string
          format: decimal
          x-nullable: true
        fees:
          type: string
          format: decimal
          x-nullable: true
        is_active:
          type: boolean
        is_favorite:
          type: boolean
        priority:
          type: string
          enum: [low, medium, high, critical]
        migrated:
          type: boolean
        search_intimation:
          type: boolean
        search_progress:
          type: boolean
        loy_integration_data:
          type: object
          x-nullable: true
        cover_information_updated_at:
          type: string
          format: date-time
          x-nullable: true
        distribution_date:
          type: string
          format: date
          x-nullable: true
        citation_date:
          type: string
          format: date
          x-nullable: true
        next_hearing_date:
          type: string
          format: date
          x-nullable: true
        prescription_date:
          type: string
          format: date
          x-nullable: true
        closure_date:
          type: string
          format: date
          x-nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
          x-nullable: true

    PaginationMeta:
      type: object
      properties:
        total:
          type: integer
        per_page:
          type: integer
        current_page:
          type: integer
        last_page:
          type: integer
        first_page:
          type: integer
        first_page_url:
          type: string
        last_page_url:
          type: string
        next_page_url:
          type: string
          x-nullable: true
        previous_page_url:
          type: string
          x-nullable: true

    FolderStats:
      type: object
      properties:
        total:
          type: integer
          description: Total number of folders
        active:
          type: integer
          description: Number of active folders
        archived:
          type: integer
          description: Number of archived folders
        highPriority:
          type: integer
          description: Number of high priority folders
        withCnj:
          type: integer
          description: Number of folders with CNJ number

    CnjValidation:
      type: object
      properties:
        valid:
          type: boolean
        formatted:
          type: string
        details:
          type: object
          properties:
            sequential:
              type: string
            digit:
              type: string
            year:
              type: string
            segment:
              type: string
            court:
              type: string
            origin:
              type: string

paths:
  # ===== HEALTH =====
  /api/v1/health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the API is running and healthy
      operationId: healthCheck
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'healthy'
                  timestamp:
                    type: string
                    format: date-time
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 'unhealthy'
                  error:
                    type: string

  # ===== AUTHENTICATION =====
  /api/v1/sessions/sign-in:
    post:
      tags:
        - Authentication
      summary: User login
      description: |
        Authenticate user with email/username and password.
        Returns user data with JWT tokens.
      operationId: signIn
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - uid
                - password
              properties:
                uid:
                  type: string
                  description: Email address or username
                  example: 'employee@benicio.com.br'
                password:
                  type: string
                  format: password
                  example: 'benicio123'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                id: 1
                full_name: 'Employee Benício'
                email: 'employee@benicio.com.br'
                username: 'employee'
                user_type: 'employee'
                metadata:
                  email_verified: true
                  email_verified_at: '2025-09-29T20:29:17.627+00:00'
                roles:
                  - id: 1
                    name: 'Root'
                    slug: 'root'
                  - id: 2
                    name: 'Admin'
                    slug: 'admin'
                auth:
                  access_token: 'eyJhbGciOiJIUzI1NiIsInR5cCI...'
                  refresh_token: 'eyJhbGciOiJIUzI1NiIsInR5cCI...'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/sessions/sign-up:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Create a new user account
      operationId: signUp
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - full_name
                - email
                - username
                - password
                - password_confirmation
              properties:
                full_name:
                  type: string
                  example: 'João Silva'
                email:
                  type: string
                  format: email
                  example: 'joao.silva@benicio.com.br'
                username:
                  type: string
                  example: 'joaosilva'
                password:
                  type: string
                  format: password
                  minLength: 8
                password_confirmation:
                  type: string
                  format: password
                user_type:
                  type: string
                  enum: [manager, employee]
                  default: employee
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/sessions/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: |
        Logout current user.
        Note: JWT tokens are stateless. This endpoint relies on client-side token removal.
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Logged out successfully'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/sessions/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh token
      description: Refresh access token using refresh token
      operationId: refreshToken
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  description: Refresh token obtained from login
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/AuthTokens'
        '400':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # ===== USER PROFILE =====
  /api/v1/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Get authenticated user information
      operationId: getProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /api/v1/me/permissions:
    get:
      tags:
        - Users
      summary: Get user permissions
      description: Get all permissions for authenticated user
      operationId: getUserPermissions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  permissions:
                    type: array
                    items:
                      type: string
                    example: ['folders.read', 'folders.write', 'clients.read']
        '401':
          description: Unauthorized

  /api/v1/me/roles:
    get:
      tags:
        - Users
      summary: Get user roles
      description: Get all roles for authenticated user
      operationId: getUserRoles
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
        '401':
          description: Unauthorized

  # ===== FOLDERS (LEGAL CASES) =====
  /api/v1/folders:
    get:
      tags:
        - Folders
      summary: List folders
      description: Get paginated list of legal cases (folders)
      operationId: listFolders
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: per_page
          in: query
          description: Items per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: search
          in: query
          description: Search term for title or CNJ number
          schema:
            type: string
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [pending, active, in_progress, completed, archived, suspended]
        - name: folder_type_id
          in: query
          description: Filter by folder type ID
          schema:
            type: integer
        - name: client_id
          in: query
          description: Filter by client ID
          schema:
            type: integer
        - name: court_id
          in: query
          description: Filter by court ID
          schema:
            type: integer
        - name: sort_by
          in: query
          description: Sort field
          schema:
            type: string
            default: created_at
            enum: [created_at, updated_at, title, case_value, distribution_date]
        - name: sort_order
          in: query
          description: Sort order
          schema:
            type: string
            default: desc
            enum: [asc, desc]
      responses:
        '200':
          description: List of folders
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Folders retrieved successfully'
                  data:
                    type: object
                    properties:
                      meta:
                        $ref: '#/components/schemas/PaginationMeta'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Folder'
        '401':
          description: Unauthorized

    post:
      tags:
        - Folders
      summary: Create folder
      description: Create a new legal case (folder)
      operationId: createFolder
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - client_id
                - folder_type_id
              properties:
                cnj_number:
                  type: string
                  pattern: '^[0-9]{7}-[0-9]{2}\.[0-9]{4}\.[0-9]\.[0-9]{2}\.[0-9]{4}$'
                internal_client_code:
                  type: string
                title:
                  type: string
                  minLength: 3
                  maxLength: 255
                description:
                  type: string
                  maxLength: 1000
                client_id:
                  type: integer
                folder_type_id:
                  type: integer
                court_id:
                  type: integer
                responsible_lawyer_id:
                  type: integer
                parent_folder_id:
                  type: integer
                status:
                  type: string
                  enum: [pending, active, in_progress, completed, archived, suspended]
                  default: pending
                instance:
                  type: string
                  enum: [first, second, superior]
                  default: first
                nature:
                  type: string
                  enum: [judicial, administrative, extrajudicial]
                  default: judicial
                action_type:
                  type: string
                electronic:
                  type: boolean
                  default: true
                phase:
                  type: string
                  enum: [knowledge, compliance, appeal]
                  default: knowledge
                prognosis:
                  type: string
                comarca:
                  type: string
                distribution_type:
                  type: string
                case_value:
                  type: number
                  minimum: 0
                priority:
                  type: string
                  enum: [low, medium, high, critical]
                  default: medium
                search_intimation:
                  type: boolean
                  default: true
                search_progress:
                  type: boolean
                  default: true
                distribution_date:
                  type: string
                  format: date
                citation_date:
                  type: string
                  format: date
                next_hearing_date:
                  type: string
                  format: date
                prescription_date:
                  type: string
                  format: date
      responses:
        '201':
          description: Folder created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Folder created successfully'
                  data:
                    $ref: '#/components/schemas/Folder'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized

  /api/v1/folders/stats:
    get:
      tags:
        - Folders
      summary: Get folder statistics
      description: Get aggregated statistics about folders
      operationId: getFolderStats
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Folder statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Folder statistics retrieved successfully'
                  data:
                    $ref: '#/components/schemas/FolderStats'
              example:
                message: 'Folder statistics retrieved successfully'
                data:
                  total: 85
                  active: 31
                  archived: 0
                  highPriority: 10
                  withCnj: 85
        '401':
          description: Unauthorized

  /api/v1/folders/favorites:
    get:
      tags:
        - Folders
      summary: List favorite folders
      description: Get paginated list of folders marked as favorites
      operationId: getFavoriteFolders
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: per_page
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: List of favorite folders
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Favorite folders retrieved successfully'
                  data:
                    type: object
                    properties:
                      meta:
                        $ref: '#/components/schemas/PaginationMeta'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Folder'
        '401':
          description: Unauthorized

  /api/v1/folders/validate-cnj:
    post:
      tags:
        - Folders
      summary: Validate CNJ number
      description: |
        Validate a CNJ (Conselho Nacional de Justiça) number format and check digit.
        CNJ format: NNNNNNN-DD.AAAA.J.TT.OOOO
      operationId: validateCnj
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - cnj_number
              properties:
                cnj_number:
                  type: string
                  example: '0000085-78.2023.8.06.0001'
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'CNJ validation completed'
                  data:
                    $ref: '#/components/schemas/CnjValidation'
        '401':
          description: Unauthorized

  /api/v1/folders/{id}:
    get:
      tags:
        - Folders
      summary: Get folder by ID
      description: Get a specific folder with all relationships
      operationId: getFolder
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Folder ID
          schema:
            type: integer
      responses:
        '200':
          description: Folder details
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Folder retrieved successfully'
                  data:
                    $ref: '#/components/schemas/Folder'
        '404':
          description: Folder not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized

    put:
      tags:
        - Folders
      summary: Update folder
      description: Update an existing folder
      operationId: updateFolder
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Folder ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cnj_number:
                  type: string
                title:
                  type: string
                description:
                  type: string
                client_id:
                  type: integer
                folder_type_id:
                  type: integer
                court_id:
                  type: integer
                responsible_lawyer_id:
                  type: integer
                status:
                  type: string
                  enum: [pending, active, in_progress, completed, archived, suspended]
                instance:
                  type: string
                  enum: [first, second, superior]
                nature:
                  type: string
                  enum: [judicial, administrative, extrajudicial]
                action_type:
                  type: string
                electronic:
                  type: boolean
                phase:
                  type: string
                  enum: [knowledge, compliance, appeal]
                prognosis:
                  type: string
                comarca:
                  type: string
                distribution_type:
                  type: string
                case_value:
                  type: number
                priority:
                  type: string
                  enum: [low, medium, high, critical]
                search_intimation:
                  type: boolean
                search_progress:
                  type: boolean
                distribution_date:
                  type: string
                  format: date
                citation_date:
                  type: string
                  format: date
                next_hearing_date:
                  type: string
                  format: date
                prescription_date:
                  type: string
                  format: date
      responses:
        '200':
          description: Folder updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Folder updated successfully'
                  data:
                    $ref: '#/components/schemas/Folder'
        '404':
          description: Folder not found
        '422':
          description: Validation error
        '401':
          description: Unauthorized

    delete:
      tags:
        - Folders
      summary: Delete folder
      description: Soft delete a folder (can be restored)
      operationId: deleteFolder
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Folder ID
          schema:
            type: integer
      responses:
        '200':
          description: Folder deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Folder deleted successfully'
        '404':
          description: Folder not found
        '401':
          description: Unauthorized

  /api/v1/folders/{id}/favorite:
    patch:
      tags:
        - Folders
      summary: Toggle favorite status
      description: Toggle folder favorite status (favorite/unfavorite)
      operationId: toggleFavorite
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Folder ID
          schema:
            type: integer
      responses:
        '200':
          description: Favorite status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Folder favorite status updated successfully'
                  data:
                    $ref: '#/components/schemas/Folder'
        '404':
          description: Folder not found
        '401':
          description: Unauthorized

  /api/v1/folders/{id}/restore:
    post:
      tags:
        - Folders
      summary: Restore deleted folder
      description: Restore a soft deleted folder
      operationId: restoreFolder
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Folder ID
          schema:
            type: integer
      responses:
        '200':
          description: Folder restored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Folder restored successfully'
                  data:
                    $ref: '#/components/schemas/Folder'
        '404':
          description: Folder not found
        '401':
          description: Unauthorized

  # ===== CLIENTS =====
  /api/v1/clients:
    get:
      tags:
        - Clients
      summary: List clients
      description: |
        Get paginated list of clients.
        Requires permission: `clients.read`
      operationId: listClients
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          description: Search by name, document or email
          schema:
            type: string
        - name: person_type
          in: query
          schema:
            type: string
            enum: [individual, company]
        - name: client_type
          in: query
          schema:
            type: string
            enum: [prospect, client, prospect_sic, prospect_dbm]
        - name: is_active
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of clients
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      meta:
                        $ref: '#/components/schemas/PaginationMeta'
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Client'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: 403
                message: 'Insufficient permissions. Required: clients.read'
        '401':
          description: Unauthorized

  # ===== ROLES =====
  /api/v1/roles:
    get:
      tags:
        - Roles
      summary: List roles
      description: |
        Get list of all roles.
        Requires permission: `roles.read`
      operationId: listRoles
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
        '403':
          description: Insufficient permissions
        '401':
          description: Unauthorized

  /api/v1/roles/attach:
    put:
      tags:
        - Roles
      summary: Attach role to user
      description: |
        Attach a role to a user.
        Requires permission: `roles.write`
      operationId: attachRole
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - role_id
              properties:
                user_id:
                  type: integer
                role_id:
                  type: integer
      responses:
        '200':
          description: Role attached successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Role attached successfully'
        '403':
          description: Insufficient permissions
        '401':
          description: Unauthorized

  # ===== EMAIL VERIFICATION =====
  /api/v1/verify-email:
    get:
      tags:
        - Users
      summary: Verify email
      description: Verify user email with token sent to email
      operationId: verifyEmail
      security:
        - bearerAuth: []
      parameters:
        - name: token
          in: query
          required: true
          description: Email verification token
          schema:
            type: string
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Email verified successfully'
        '400':
          description: Invalid or expired token
        '401':
          description: Unauthorized

  # ========================
  # AI ENDPOINTS
  # ========================

  # ===== AI CHAT =====
  /api/v1/ai/chat:
    post:
      tags:
        - AI
      summary: Send message to AI agent
      description: |
        Send a message to an AI agent and get a response. The system automatically selects
        the most appropriate agent based on the message content.

        **Available Agent Types:**
        - Legal Research: Jurisprudência, legislação, súmulas
        - Document Analyzer: Análise de contratos, petições
        - Case Strategy: Estratégia processual, chances de êxito
        - Deadline Manager: Cálculo de prazos processuais
        - Legal Writer: Redação de petições, pareceres
        - Client Communicator: Comunicação simplificada
      operationId: aiChat
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AiChatRequest'
            examples:
              simple_question:
                summary: Pergunta simples
                value:
                  message: 'Qual o prazo para recurso de apelação cível?'
                  mode: 'single'
              with_context:
                summary: Com contexto de processo
                value:
                  message: 'Analise a viabilidade de recurso neste caso'
                  folder_id: 123
                  mode: 'single'
              continue_conversation:
                summary: Continuar conversa
                value:
                  message: 'E para recursos trabalhistas?'
                  conversation_id: 5
                  mode: 'single'
      responses:
        '200':
          description: AI response generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AiChatResponse'
              example:
                success: true
                data:
                  conversation_id: 1
                  message_id: 5
                  agent: 'legal-research'
                  output: 'O prazo para recurso de apelação cível é de 15 dias úteis, conforme o Art. 1.003, §5º do CPC/2015.'
                  tokens_used: 150
                  citations:
                    - source_type: 'legislation'
                      source_title: 'CPC - Código de Processo Civil'
                      source_url: 'http://www.planalto.gov.br/ccivil_03/_ato2015-2018/2015/lei/l13105.htm'
                      excerpt: 'Art. 1.003. O prazo para interposição de recurso...'
                      confidence_score: 0.98
        '400':
          description: Bad request - invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '429':
          description: Rate limit exceeded
        '500':
          description: Internal server error

  # ===== AI STREAMING =====
  /api/v1/ai/chat/stream:
    post:
      tags:
        - AI
      summary: Send message to AI agent streaming
      description: |
        Same as `/ai/chat` but returns response as Server-Sent Events (SSE) for real-time streaming.

        **SSE Event Types:**
        - `content`: Chunks of AI response
        - `done`: Final event with metadata
        - `error`: Error event
      operationId: aiChatStream
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AiChatRequest'
      responses:
        '200':
          description: Streaming response
          content:
            text/event-stream:
              schema:
                type: string
              example: |
                data: {"type":"content","content":"O prazo para"}

                data: {"type":"content","content":" recurso de apelação"}

                data: {"type":"content","content":" é de 15 dias úteis."}

                data: {"type":"done","metadata":{"tokens":150,"citations":1}}

                event: done
                data: {}
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  # ===== AI WORKFLOWS =====
  /api/v1/ai/workflows:
    post:
      tags:
        - AI
      summary: Execute multi-agent workflow
      description: |
        Execute a predefined workflow that coordinates multiple AI agents working together.

        **Available Workflows:**

        **1. full-case-analysis** (Análise Completa de Caso)
        - Document Analyzer → Legal Research → Case Strategy → Client Communicator
        - Use: Análise completa de processo com estratégia

        **2. contract-review** (Revisão de Contrato)
        - Document Analyzer → Legal Research → Legal Writer
        - Use: Análise e sugestões de melhorias em contratos

        **3. litigation-strategy** (Estratégia Processual)
        - Legal Research → Case Strategy → Deadline Manager
        - Use: Desenvolvimento de estratégia e cálculo de prazos
      operationId: aiExecuteWorkflow
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AiWorkflowRequest'
            examples:
              case_analysis:
                summary: Análise completa de caso
                value:
                  workflow: 'full-case-analysis'
                  message: 'Avaliar viabilidade de recurso'
                  folder_id: 123
              contract_review:
                summary: Revisão de contrato
                value:
                  workflow: 'contract-review'
                  folder_id: 456
      responses:
        '200':
          description: Workflow executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AiWorkflowResponse'
              example:
                success: true
                data:
                  workflow: 'full-case-analysis'
                  results:
                    - agent: 'document-analyzer'
                      output: 'Análise documental: 3 documentos analisados...'
                      tokens_used: 500
                    - agent: 'legal-research'
                      output: 'Pesquisa jurisprudencial: 5 precedentes encontrados...'
                      tokens_used: 800
                    - agent: 'case-strategy'
                      output: 'Estratégia recomendada: Propor acordo...'
                      tokens_used: 600
                  summary: "# Resumo do Workflow\n\nTotal de agentes: 4..."
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  # ===== AI AGENTS LIST =====
  /api/v1/ai/agents:
    get:
      tags:
        - AI
      summary: List available AI agents
      description: Get list of all active AI agents with their capabilities
      operationId: listAiAgents
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of AI agents
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AiAgent'
              example:
                success: true
                data:
                  - id: 1
                    name: 'Pesquisador Jurídico'
                    slug: 'legal-research'
                    description: 'Especialista em pesquisa de jurisprudência...'
                    model: 'meta/llama-3.1-70b-instruct'
                    capabilities: ['web_search', 'vector_search']
                    is_active: true
                  - id: 2
                    name: 'Analisador de Documentos'
                    slug: 'document-analyzer'
                    description: 'Analisa petições, contratos...'
                    model: 'microsoft/phi-4-multimodal-instruct'
                    capabilities: ['pdf_parsing', 'ocr']
                    is_active: true
        '401':
          description: Unauthorized

  # ===== AI CONVERSATIONS LIST =====
  /api/v1/ai/conversations:
    get:
      tags:
        - AI
      summary: List user conversations
      description: Get paginated list of user's AI conversations
      operationId: listAiConversations
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: folder_id
          in: query
          description: Filter by folder/case ID
          schema:
            type: integer
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AiConversation'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
        '401':
          description: Unauthorized

  # ===== AI CONVERSATION DETAILS =====
  /api/v1/ai/conversations/{id}:
    get:
      tags:
        - AI
      summary: Get conversation details
      description: Get conversation details including all messages and citations
      operationId: getAiConversation
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Conversation ID
          schema:
            type: integer
      responses:
        '200':
          description: Conversation details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      conversation:
                        $ref: '#/components/schemas/AiConversation'
                      messages:
                        type: array
                        items:
                          $ref: '#/components/schemas/AiMessage'
        '401':
          description: Unauthorized
        '404':
          description: Conversation not found

    delete:
      tags:
        - AI
      summary: Delete conversation
      description: Delete a conversation and all its messages
      operationId: deleteAiConversation
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Conversation ID
          schema:
            type: integer
      responses:
        '200':
          description: Conversation deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Conversation deleted successfully'
        '401':
          description: Unauthorized
        '404':
          description: Conversation not found

security:
  - bearerAuth: []
